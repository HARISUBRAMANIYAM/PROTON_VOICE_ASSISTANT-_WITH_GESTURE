// DOM Elements
const elements = {
    userInput: document.getElementById("userInput"),
    userInputButton: document.getElementById("userInputButton"),
    messages: document.getElementById("messages"),
    menuToggle: document.getElementById("menuToggle"),
    sidebar: document.querySelector(".sidebar"),
    menu: document.querySelector(".menu"),
    chatHistoryBtn: document.getElementById("chatHistoryBtn"),
    chatHistoryContainer: document.querySelector(".chat-history-container"),
    closeCH: document.getElementById("closeCH"),
    chatHistoryList: document.getElementById("chat-history-list"),
    chatContent: document.getElementById("chat-content"),
    chatHistoryFilenames: document.getElementById("chatHistoryFilenames"),
    chatHistoryFiles: document.getElementById("chatHistoryFiles"),
    modal: document.querySelector(".modal"),
    closeModal: document.querySelector(".close"),
    listeningButton: document.querySelector(".listening"),
    logoutButton: document.getElementById("logout"),
    refreshHistory: document.getElementById("refreshHistory"),
    // New elements for history display
    historyDisplayContainer: document.getElementById("history-display-container"),
    historyFileName: document.getElementById("history-file-name"),
    historyMessages: document.getElementById("history-messages"),
    closeHistoryBtn: document.getElementById("close-history-btn"),
    unifiedChatHistory: document.getElementById("unifiedChatHistory"),
    closeHistory: document.getElementById("closeHistory"),
    historyDisplayArea: document.getElementById("historyDisplayArea"),
    // SPA-related elements
    pages: document.querySelectorAll(".page")
};

// SPA-related functions
function updateCurrentPage() {
    // Get current page from URL or use default
    const url = window.location.pathname;
    const pageName = url.split('/').pop().split('.')[0] || 'home';
    
    // Use the SPA navigation function
    if (typeof navigateSPA === 'function') {
        navigateSPA(pageName);
    } else {
        console.error("navigateSPA function not found");
    }
}

// Initialize Speech Recognition
const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
recognition.lang = 'en-US';
recognition.continuous = false;
recognition.interimResults = false;

// Central object to manage chat history data
const chatHistoryManager = {
    cachedFiles: [],
    
    // Load all chat files from server and update local storage
    async loadAllFiles() {
        try {
            setLoadingState(true, elements.chatHistoryFiles, "Loading chat history...");
            const serverFiles = await eel.getAllChatFiles()();
            this.cachedFiles = serverFiles;
            localStorage.setItem("chat_files", JSON.stringify(serverFiles));
            refreshChatHistoryUI(serverFiles);
            return serverFiles;
        } catch (error) {
            console.error("Error loading chat files:", error);
            setLoadingState(false, elements.chatHistoryFiles, null, "Failed to load chat history");
            return [];
        }
    },
    
    // Get a specific chat by filename
    async getChat(fileName) {
        try {
            // Check local storage first
            const localData = JSON.parse(localStorage.getItem(`conversation:${fileName}`));
            const localTimestamp = parseInt(localStorage.getItem(`lastSynced:${fileName}`)) || 0;
            
            // Then get server data
            const serverData = await eel.getChatHistory(fileName)();
            const serverTimestamp = serverData.timestamp || 0;
            
            // Use the newer data
            if (serverTimestamp > localTimestamp) {
                localStorage.setItem(`conversation:${fileName}`, JSON.stringify(serverData));
                localStorage.setItem(`lastSynced:${fileName}`, serverTimestamp.toString());
                return serverData;
            } else if (localData) {
                return localData;
            } else {
                return serverData;
            }
        } catch (error) {
            console.error(`Error getting chat ${fileName}:`, error);
            throw error;
        }
    },
    
    // Add a new message to the current chat
    addMessage(message, isUser = true) {
        // Implementation depends on how you store the current chat
        // This is a placeholder for the concept
    }
};

// Message Functions
function addUserMsg(msg) {
    if (!elements.messages) {
        console.error("Message container not found");
        return;
    }
    console.log("User Msg added:", msg);
    elements.messages.innerHTML += `<div class="message from ready rtol"> ${msg}</div>`;
    elements.messages.scrollTop = elements.messages.scrollHeight - elements.messages.clientHeight - 15;
    let index = elements.messages.childElementCount - 1;
    setTimeout(changeClass.bind(null, elements.messages, index, "message from"), 500);
}

function addAppMsg(msg) {
    if (!elements.messages) {
        console.error("Message container not found");
        return;
    }
    console.log("App Msg added:", msg);
    elements.messages.innerHTML += `<div class="message to ready ltor"> ${msg}</div>`;
    elements.messages.scrollTop = elements.messages.scrollHeight - elements.messages.clientHeight - 15;
    let index = elements.messages.childElementCount - 1;
    setTimeout(changeClass.bind(null, elements.messages, index, "message to"), 500);
}

function changeClass(element, index, newClass) {
    console.log(newClass + ' ' + index);
    element.children[index].className = newClass;
}

// Improved loading state management
function setLoadingState(isLoading, element, loadingMessage = "Loading...", errorMessage = null) {
    if (!element) return;
    
    if (isLoading) {
        element.innerHTML = `<div class="loading-indicator">${loadingMessage}</div>`;
    } else if (errorMessage) {
        element.innerHTML = `<div class="error-message">${errorMessage}</div>`;
    }
}

async function getUserInput() {
    let msg = elements.userInput.value.trim();

    if (msg.length !== 0) {
        console.log("User input:", msg);
        elements.userInput.value = "";

        addUserMsg(msg);  // Store in UI & local storage

        try {
            let response = await eel.getUserInput(msg)();  // Send to backend
            addAppMsg(response);  // Store assistant response

            // Mark sync time
            localStorage.setItem("lastSynced", Date.now().toString());
        } catch (error) {
            console.error("Eel Communication Error:", error);
        }
    }
}

// Unified function to update any history list element
function updateHistoryList(listElement, files, onClickHandler) {
    if (!listElement) return;
    
    listElement.innerHTML = "";
    
    if (files && files.length > 0) {
        files.forEach(file => {
            const listItem = document.createElement("li");
            listItem.classList.add("chat-session-item");
            listItem.textContent = file;
            listItem.addEventListener("click", () => onClickHandler(file));
            listElement.appendChild(listItem);
        });
    } else {
        const noFilesMessage = document.createElement("li");
        noFilesMessage.textContent = "No chat history found";
        listElement.appendChild(noFilesMessage);
    }
}

// Enhanced loadChatFile with better error handling
async function loadChatFile(fileName) {
    console.log("Loading chat file:", fileName);
    
    if (!elements.historyDisplayArea) {
        console.error("History display area not found");
        return;
    }
    
    // Show loading indicator
    setLoadingState(true, elements.historyDisplayArea, "Loading chat...");
    
    try {
        // Use the existing backend function to get chat data
        let chatData = await eel.getChatHistory(fileName)();
        console.log("Backend response:", chatData);
        
        if (!chatData || !chatData.data || !Array.isArray(chatData.data)) {
            throw new Error("Invalid chat data format");
        }
        
        // Display chat in the history container
        displayChatInHistoryContainer(chatData.data, fileName);
        
        // Show the unified chat history if not already visible
        if (elements.unifiedChatHistory) {
            elements.unifiedChatHistory.style.display = "block";
        }
    } catch (error) {
        console.error("Error loading chat file:", error);
        setLoadingState(false, elements.historyDisplayArea, null, `Error: ${error.message || "Failed to load chat"}`);
    }
}

function displayChatInHistoryContainer(chatData, fileName) {
    if (!elements.historyDisplayArea) {
        console.error("History display area not found");
        return;
    }

    // Clear existing content
    elements.historyDisplayArea.innerHTML = '';

    // Check if data is valid
    if (!chatData || !Array.isArray(chatData)) {
        console.error("Invalid chat data format");
        elements.historyDisplayArea.innerHTML = `<div class="error-message">Invalid chat data format</div>`;
        return;
    }

    // Create a fragment to improve performance
    const fragment = document.createDocumentFragment();

    // Add header with chat info
    const headerElement = document.createElement('div');
    headerElement.className = 'chat-session-header';

    const titleElement = document.createElement('h3');
    titleElement.textContent = fileName || "Chat Session";
    headerElement.appendChild(titleElement);

    fragment.appendChild(headerElement);

    // Add chat messages to the container
    chatData.forEach(message => {
        if (!message.sender || !message.message) {
            console.warn("Invalid message format:", message);
            return;  // Skip invalid messages
        }

        const messageElement = document.createElement('div');
        messageElement.className = message.sender === 'User' ? 'history-message to' : 'history-message from';
        messageElement.innerHTML = `<strong>${message.sender}:</strong> ${message.message}`;
        fragment.appendChild(messageElement);
    });

    // Add everything to the DOM at once (more efficient)
    elements.historyDisplayArea.appendChild(fragment);

    // Scroll to the bottom of the container
    elements.historyDisplayArea.scrollTop = elements.historyDisplayArea.scrollHeight;
    console.log("chat data received:", chatData);
}

async function loadChatContent(fileName) {
    // This function now serves as a bridge to the enhanced loadChatFile
    loadChatFile(fileName);
}

// Replace the legacy syncChatHistory with the improved version
async function syncChatHistory() {
    try {
        await chatHistoryManager.loadAllFiles();
    } catch (error) {
        console.error("Error syncing chat history:", error);
    }
}

// Function to update the chat history UI (replaces the redundant refreshChatHistoryUI)
function refreshChatHistoryUI(files) {
    // Update all history lists with the same data but different click handlers
    updateHistoryList(elements.chatHistoryList, files, loadChatFile);
    updateHistoryList(elements.chatHistoryFilenames, files, loadChatFile);
    updateHistoryList(elements.chatHistoryFiles, files, loadChatFile);
}

// Refreshes chat history from backend
function refreshChatHistory() {
    console.log("Refreshing chat history...");
    
    // Add loading indicators to all containers
    const loadingMessage = "Loading chat history...";
    
    if (elements.chatHistoryList) {
        elements.chatHistoryList.innerHTML = `<li>${loadingMessage}</li>`;
    }
    
    if (elements.chatHistoryFilenames) {
        elements.chatHistoryFilenames.innerHTML = `<li>${loadingMessage}</li>`;
    }
    
    if (elements.chatHistoryFiles) {
        elements.chatHistoryFiles.innerHTML = `<li>${loadingMessage}</li>`;
    }

    // Fetch chat files from the backend
    eel.getAllChatFiles()(function(files) {
        console.log("Retrieved chat history files:", files);
        refreshChatHistoryUI(files);
    });
}

// Event Listeners Setup with improved handlers
function setupEventListeners() {
    // User input handling
    if (elements.userInputButton) {
        elements.userInputButton.addEventListener("click", getUserInput, false);
    }
    
    if (elements.userInput) {
        elements.userInput.addEventListener("keyup", function(event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                getUserInput();
            }
        });
    }

    // Menu toggle
    if (elements.menuToggle && elements.sidebar && elements.menu) {
        elements.menuToggle.addEventListener("click", function() {
            console.log("Menu Clicked");
            elements.sidebar.classList.toggle("visible");
            elements.menu.classList.toggle("active");
        });
    }

    // Chat history button
    if (elements.chatHistoryBtn && elements.unifiedChatHistory) {
        elements.chatHistoryBtn.addEventListener("click", function() {
            console.log("Chat History Button Clicked");
            elements.unifiedChatHistory.style.display = 
                elements.unifiedChatHistory.style.display === "block" ? "none" : "block";
            
            // Refresh the history list when opening
            if (elements.unifiedChatHistory.style.display === "block") {
                refreshChatHistory();
            }
        });
    }

    // Close chat history button
    if (elements.closeHistory && elements.unifiedChatHistory) {
        elements.closeHistory.addEventListener("click", function() {
            elements.unifiedChatHistory.style.display = "none";
        });
    }

    // Close modal
    if (elements.closeModal && elements.modal) {
        elements.closeModal.addEventListener("click", function() {
            elements.modal.style.display = "none";
        });
    }

    // Legacy close history display button
    if (elements.closeHistoryBtn && elements.historyDisplayContainer) {
        elements.closeHistoryBtn.addEventListener("click", function() {
            elements.historyDisplayContainer.classList.remove('active');
        });
    }

    // Speech recognition
    if (elements.listeningButton) {
        elements.listeningButton.addEventListener("click", function() {
            recognition.start();
        });
    }

    // Logout button
    if (elements.logoutButton) {
        elements.logoutButton.addEventListener("click", function() {
            eel.exit();
        });
    }
    
    // Refresh history button
    if (elements.refreshHistory) {
        elements.refreshHistory.addEventListener("click", refreshChatHistory);
    }
    
    // Close history panel when clicking outside
    document.addEventListener("click", function(event) {
        if (elements.unifiedChatHistory && 
            elements.unifiedChatHistory.style.display === "block" &&
            !elements.unifiedChatHistory.contains(event.target) &&
            !event.target.closest('#chatHistoryBtn')) {
            elements.unifiedChatHistory.style.display = "none";
        }
    });
    
    // Add keyboard shortcuts
    document.addEventListener("keydown", function(event) {
        // Escape key closes history panel
        if (event.key === "Escape" && 
            elements.unifiedChatHistory && 
            elements.unifiedChatHistory.style.display === "block") {
            elements.unifiedChatHistory.style.display = "none";
        }
        
        // Ctrl+H opens chat history
        if (event.ctrlKey && event.key === "h" && elements.chatHistoryBtn) {
            event.preventDefault();
            elements.chatHistoryBtn.click();
        }
    });
    
    // Initialize forms for login and register pages
    const loginForm = document.getElementById("login-form");
    if (loginForm) {
        loginForm.addEventListener("submit", function(event) {
            event.preventDefault();
            const username = document.getElementById("username").value;
            const password = document.getElementById("password").value;
            
            // Call your backend login function
            console.log("Login attempt:", username);
            // Example: eel.login(username, password)();
        });
    }
    
    const registerForm = document.getElementById("register-form");
    if (registerForm) {
        registerForm.addEventListener("submit", function(event) {
            event.preventDefault();
            const username = document.getElementById("new-username").value;
            const password = document.getElementById("new-password").value;
            const confirmPassword = document.getElementById("confirm-password").value;
            
            if (password !== confirmPassword) {
                alert("Passwords do not match");
                return;
            }
            
            // Call your backend register function
            console.log("Register attempt:", username);
            // Example: eel.register(username, password)();
        });
    }
}

// Speech Recognition Handlers
recognition.onresult = function(event) {
    const transcript = event.results[0][0].transcript;
    if (elements.userInput) {
        elements.userInput.value = transcript;
        getUserInput();
    }
};

recognition.onerror = function(event) {
    console.error("Speech recognition error", event);
};

// Eel Exposed Functions
eel.expose(addUserMsg);
eel.expose(addAppMsg);

// Initialize
document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM loaded - setting up event listeners");
    setupEventListeners();
    
    // Initial load of chat history files
    refreshChatHistory();
    
    // Also sync chat history
    syncChatHistory();
    
    // Set up the current page based on URL
    updateCurrentPage();
});

// Ensure navigation functions are properly exposed to eel
eel.expose(function() { return window.goback(); }, "goback");
eel.expose(function() { return window.goforward(); }, "goforward");

console.log("main.js fully loaded");