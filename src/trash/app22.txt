import eel
import os
import json
import threading
from datetime import datetime

class ChatManager:
    _instance = None
    CHAT_HISTORY_FILE = "chat_history.json"
    
    def __new__(cls):
        if not cls._instance:
            cls._instance = super().__new__(cls)
            cls._instance._initialize()
        return cls._instance
    
    def _initialize(self):
        self.chat_data = self._load_chat_data()
        self.save_thread = threading.Thread(target=self._autosave, daemon=True)
        self.save_thread.start()
    
    @staticmethod
    def _load_chat_data():
        if os.path.exists(ChatManager.CHAT_HISTORY_FILE):
            with open(ChatManager.CHAT_HISTORY_FILE, 'r') as f:
                return json.load(f)
        return {}
    
    def _autosave(self):
        while True:
            threading.Event().wait(300)  # Save every 5 minutes
            self._save_data()
    
    def _save_data(self):
        with open(ChatManager.CHAT_HISTORY_FILE, 'w') as f:
            json.dump(self.chat_data, f, indent=2)

    @eel.expose
    def save_chat(self, user_id, session_id, message, sender):
        user_entry = self.chat_data.setdefault(user_id, {})
        session = user_entry.setdefault(session_id, [])
        session.append({
            "sender": sender,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })
        if len(session) % 5 == 0:  # Mirror JavaScript's save frequency
            self._save_data()

    @eel.expose
    def load_chat(self, user_id, session_id):
        try:
            return self.chat_data.get(user_id, {}).get(session_id, [])
        except KeyError:
            return []

    @eel.expose
    def get_user_sessions(self, user_id):
        return list(self.chat_data.get(user_id, {}).keys())

class EelApp:
    def __init__(self):
        self.chat_manager = ChatManager()
        self.web_path = os.path.join(os.path.dirname(__file__), "web")
        
    def start(self):
        eel.init(self.web_path, allowed_extensions=['.js', '.html'])
        eel.start('index.html', 
                 mode='chrome',
                 host='localhost',
                 port=5000,
                 size=(350, 480),
                 position=(100, 100),
                 disable_cache=True,
                 close_callback=self.cleanup)
    
    def cleanup(self, route, websockets):
        self.chat_manager._save_data()
        print("Application closed gracefully")

if __name__ == "__main__":
    app = EelApp()
    app.start()