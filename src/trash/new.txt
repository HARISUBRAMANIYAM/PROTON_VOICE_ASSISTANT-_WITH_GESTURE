import datetime
import os
import smtplib
import sys
import threading
import time
import webbrowser
from queue import Queue
from os import listdir
from os.path import isfile, join
import pyautogui
import pyttsx3
import speech_recognition as sr
from datetime import date
from pynput.keyboard import Controller, Key
import logging

# Configure Logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Initialize TTS Engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)
keyboard = Controller()

def speak(text):
    """Converts text to speech"""
    try:
        engine.say(text)
        engine.runAndWait()
    except Exception as e:
        logging.error(f"Error in TTS: {e}")

def record_audio():
    """Captures audio input and converts it to text"""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        try:
            audio = recognizer.listen(source, timeout=5)
            text = recognizer.recognize_google(audio)
            print(f"Recognized: {text}")
            return text.lower()
        except sr.UnknownValueError:
            speak("Sorry, I didn't catch that. Please repeat.")
            return ""
        except sr.RequestError:
            speak("Sorry, my speech service is unavailable.")
            return ""
        except Exception as e:
            logging.error(f"Error in speech recognition: {e}")
            return ""
def functime():
    time = datetime.datetime.now().strftime("%I:%M %p")
    return time
def funcdate():
    today = date.today()
    return today.strftime("%B %d, %Y")

def search_google(query):
    """Performs a Google search"""
    try:
        url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
        webbrowser.open(url)
        speak(f"Here are the results for {query}")
    except Exception as e:
        logging.error(f"Error in Google Search: {e}")
        speak("Sorry, I couldn't process the search request.")

def open_application(app_name):
    """Opens a system application based on user input"""
    apps = {
        "notepad": "notepad.exe",
        "calculator": "calc.exe",
        "chrome": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
    }
    try:
        if app_name in apps:
            os.startfile(apps[app_name])
            speak(f"Opening {app_name}")
        else:
            speak(f"Application {app_name} not recognized.")
    except Exception as e:
        logging.error(f"Error opening application {app_name}: {e}")
        speak("Failed to open the application.")

def close_application(app_name):
    """Closes a system application"""
    try:
        os.system(f"taskkill /f /im {app_name}.exe")
        speak(f"Closing {app_name}")
    except Exception as e:
        logging.error(f"Error closing application {app_name}: {e}")
        speak("Failed to close the application.")

def system_command(command):
    """Executes system-related commands like shutdown and restart"""
    commands = {
        "shutdown": "shutdown /s /t 1",
        "restart": "shutdown /r /t 1",
        "exit": "exit"
    }
    try:
        if command in commands:
            os.system(commands[command])
            speak(f"Executing {command}")
        else:
            speak("Invalid system command.")
    except Exception as e:
        logging.error(f"Error executing system command {command}: {e}")

def handle_voice_command():
    """Processes voice commands"""
    speak(" Hello I'm Proton , how can I assist you?")
    while True:
        command = record_audio()
        if "search" in command:
            search_google(command.replace("search", "").strip())
        elif "open" in command:
            open_application(command.replace("open", "").strip())
        elif "close" in command:
            close_application(command.replace("close", "").strip())
        elif "shutdown" in command or "restart" in command or "exit" in command:
            system_command(command)
            break
        elif "wake up" in command:
            speak("I'm listening. Please say a command.")
        elif "time now" in command:
            speak(f"The current time is {functime()}")
        elif "Today's date" in command:
            speak(f"Today is {funcdate()}")
        elif "stop listening" in command:
            speak("Okay, I am pausing. Say wake up to restart.")
            break
        else:
            speak("Sorry, I didn't understand. Please try again.")

if __name__ == "__main__":
    handle_voice_command()
