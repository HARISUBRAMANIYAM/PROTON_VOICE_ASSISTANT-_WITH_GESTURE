import pyttsx3
import speech_recognition as sr
from datetime import date, datetime
import time
import webbrowser
import pyautogui
import sys
import os
import smtplib
import wikipedia
import Gesture_Controller
import app
from threading import Thread
import logging
from queue import Queue
import threading
from pynput.keyboard import Controller
from pynput.keyboard._win32 import KeyCode
# -------------Object Initialization---------------
today = date.today()
recognizer = sr.Recognizer()
keyboard = Controller()
engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[0].id)

# ----------------Variables------------------------
file_exp_status = False
files = []
path = ''
is_awake = True  # Bot status

# ------------------Functions----------------------
def reply(audio):
    """Reply to the user and log the response."""
    try:
        user_id = 1
        app.ChatBot.addAppMsg(user_id, audio)
        print("Bot reply:", audio)
    except Exception as e:
        print(f"Error sending reply: {e}")
    engine.say(audio)
    engine.runAndWait()

def wish():
    """Greet the user based on the time of day."""
    hour = datetime.now().hour
    if 0 <= hour < 12:
        reply("Good Morning!")
    elif 12 <= hour < 18:
        reply("Good Afternoon!")
    else:
        reply("Good Evening!")
    reply("I am Proton, how may I help you?")

def record_audio():
    """Record audio from the microphone and convert it to text."""
    with sr.Microphone() as source:
        recognizer.pause_threshold = 0.8
        try:
            print("Listening...")
            audio = recognizer.listen(source, phrase_time_limit=5)
            return recognizer.recognize_google(audio).lower()
        except sr.UnknownValueError:
            print("Could not understand audio")
            return ""
        except sr.RequestError:
            reply('Sorry, my service is down. Please check your Internet connection.')
            return ""

def open_browser(browser_name):
    """Open the specified browser."""
    if 'chrome' in browser_name:
        os.system('start chrome')
        reply('Chrome opened successfully')
    elif 'bing' in browser_name:
        os.system('start microsoft-edge:http://bing.com')
        reply('Bing opened successfully')
    else:
        reply('Browser not supported')

def take_screenshot():
    """Take a screenshot and save it."""
    time_stamp = datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
    screenshot_path = f'C:/Users/HP/Desktop/Proton/Screenshots/ScreenShot{time_stamp}.png'
    pyautogui.screenshot(screenshot_path)
    reply(f'Screenshot saved at {screenshot_path}')

def handle_gesture_control(command):
    """Handle gesture control commands."""
    if 'launch' in command:
        if Gesture_Controller.GestureController.gc_mode:
            reply('Gesture recognition is already active')
        else:
            gc = Gesture_Controller.GestureController()
            Thread(target=gc.start).start()
            reply('Launched Successfully')
    elif 'stop' in command or 'top' in command:
        if Gesture_Controller.GestureController.gc_mode:
            Gesture_Controller.GestureController.gc_mode = 0
            reply('Gesture recognition stopped')
        else:
            reply('Gesture recognition is already inactive')

def handle_file_navigation(command):
    """Handle file navigation commands."""
    global file_exp_status, files, path
    if 'list' in command:
        counter = 0
        path = 'C://'
        files = os.listdir(path)
        file_list = "<br>".join([f"{i+1}: {f}" for i, f in enumerate(files)])
        file_exp_status = True
        reply('These are the files in your root directory')
        app.ChatBot.addAppMsg(file_list)
    elif file_exp_status and 'open' in command:
        try:
            file_index = int(command.split()[-1]) - 1
            file_path = os.path.join(path, files[file_index])
            if os.path.isfile(file_path):
                os.startfile(file_path)
                file_exp_status = False
            else:
                path = os.path.join(path, files[file_index])
                files = os.listdir(path)
                file_list = "<br>".join([f"{i+1}: {f}" for i, f in enumerate(files)])
                reply('Opened Successfully')
                app.ChatBot.addAppMsg(file_list)
        except Exception as e:
            reply('You do not have permission to access this folder')
    elif file_exp_status and 'back' in command:
        if path == 'C://':
            reply('Sorry, this is the root directory')
        else:
            path = os.path.dirname(path)
            files = os.listdir(path)
            file_list = "<br>".join([f"{i+1}: {f}" for i, f in enumerate(files)])
            reply('OK')
            app.ChatBot.addAppMsg(file_list)

# Command Mapping
COMMAND_MAP = {
    'hello': wish,
    'what is your name': lambda: reply('My name is Proton!'),
    'date': lambda: reply(today.strftime("%B %d, %Y")),
    'time': lambda: reply(str(datetime.now()).split(" ")[1].split('.')[0]),
    'search': lambda: webbrowser.get().open(f'https://google.com/search?q={voice_data.split("search")[1]}'),
    'minimize all': lambda: pyautogui.hotkey('win', 'down'),
    'maximize all': lambda: pyautogui.hotkey('win', 'up'),
    'open notepad': lambda: os.system('start notepad'),
    'close notepad': lambda: os.system('taskkill /f /im notepad.exe'),
    'type': lambda: keyboard.write(record_audio()),
    'save': lambda: keyboard.press_and_release('ctrl+s'),
    'close': lambda: keyboard.press_and_release('alt+f4'),
    'folders': lambda: os.system('start explorer'),
    'undo': lambda: keyboard.press_and_release('ctrl+z'),
    'redo': lambda: keyboard.press_and_release('ctrl+y'),
    'open calculator': lambda: os.system('start calc'),
    'close calculator': lambda: os.system('taskkill /f /im calculator.exe'),
    'open browser': lambda: open_browser(record_audio()),
    'close browser': lambda: [os.system(f'taskkill /f /im {browser}.exe') for browser in ['chrome', 'msedge']],
    'screen shot': take_screenshot,
    'select all': lambda: keyboard.press_and_release('ctrl+a'),
    'shutdown': lambda: os.system('shutdown /s /t 1'),
    'restart': lambda: os.system('shutdown /r /t 1'),
    'new tab': lambda: keyboard.press_and_release('ctrl+t'),
    'close tab': lambda: keyboard.press_and_release('ctrl+w'),
    'delete': lambda: keyboard.press_and_release('delete'),
    'backspace': lambda: keyboard.press_and_release('backspace'),
    'enter': lambda: keyboard.press_and_release('enter'),
    'location': lambda: webbrowser.get().open(f'https://google.nl/maps/place/{record_audio()}/&amp;'),
    'bye': lambda: [reply("Good bye Sir! Have a nice day."), setattr(sys.modules[__name__], 'is_awake', False)],
    'exit': lambda: sys.exit(),
    'launch gesture recognition': lambda: handle_gesture_control('launch'),
    'stop gesture recognition': lambda: handle_gesture_control('stop'),
    'scroll up': lambda: pyautogui.scroll(3),
    'scroll down': lambda: pyautogui.scroll(-3),
    'scroll right': lambda: pyautogui.hscroll(3),
    'scroll left': lambda: pyautogui.hscroll(-3),
    'copy All': lambda: keyboard.press_and_release('ctrl+a'),
    'copy': lambda: keyboard.press_and_release('ctrl+c'),
    'paste': lambda: keyboard.press_and_release('ctrl+v'),
    'list': lambda: handle_file_navigation('list'),
    'open': lambda: handle_file_navigation('open'),
    'back': lambda: handle_file_navigation('back'),
}

def respond(voice_data):
    """Process the voice command."""
    global is_awake
    if not is_awake and "wake up" in voice_data:
        is_awake = True
        reply("I am now awake and ready.")
        return

    if is_awake:
        for command, action in COMMAND_MAP.items():
            if command in voice_data:
                action()
                break
        else:
            reply('I am not functioned to do this!')

# Main loop
if __name__ == "__main__":
    wish()
    while True:
        voice_data = record_audio()
        if 'proton' in voice_data:
            respond(voice_data)